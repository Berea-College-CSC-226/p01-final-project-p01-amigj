
roll system(range random)
(fighting mech. similar to dnd)

@ = its own .py file

@start menu

@game itself (running scenes, start menu, end screen)

@scene# (classes/functions)

    @dialogue boxes (any button press or click makes boxes go)[function or class] Then I can customize the dialogue boxes by printing

    button options [function or class] similar to dialogue but selection has if, elif, and else statements
    (these two may share a .py file or be in the game's file)

win and lose condition leads to end screen

@end screen


img assets need to be pngs (in a folder called images)
character assets (individual name imgs folder)
backgrounds (bkg img folder)
extras such a items or props (extras folder)
----------------------------------------------------------------------------------------
plot/dialogue options:




-----------------------------------------------------------------------------
   12/4/24
   The plan is this:
   1) start screen [semi-hard]
   2) game code [hard as fuck]
        2a) dialogue class working
        2b) character placeholder (box)
        2c) getting the story written/so dialouge can be implemented
        2d) button options
   3) end screen [semi-hard]
        3a) get the main end screen working
        3b) optional:win screen
        3c) optional:lose screen
   4) character assets impleted to make the program look pretty [easy]
------------------------------------------------------

From trial run file:


import pygame
from sys import exit
pygame.init()
screen = pygame.display.set_mode((800,600))
clock = pygame.time.Clock()



def box_text(text):
    test_font = pygame.font.Font(None, 50)
    text_surface = test_font.render(text, True, "Red")
    text_surface_rect = text_surface.get_rect(midbottom = (400, 450))
    screen.blit(text_surface, text_surface_rect)

txt = pygame.font.Font(None, 50)
txt_surface = txt.render("hello there friends. I like to commit murder. It's fun and tasty", True, "Yellow")

s = pygame.Surface((800,200))
s.fill('black')
s_rect = s.get_rect(midbottom = (400,600)) #gets a surface (s) and draws a rectangle around it. Makes it more precise to place. It's like an archor point
chara = pygame.image.load("test_scott.png")


while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.QUIT
            exit()

    screen.blit(chara,(0,0))
    screen.blit(s, s_rect)
    screen.blit (txt_surface, (0,0))
    box_text("Hello World \n"
             "I am Obama")
    pygame.display.update()
    clock.tick(60)
